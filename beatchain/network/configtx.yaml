# Blockchain & Applications Project 2: Beatchain
# Cody Gilbert


Organizations:

    - &BeatchainOrg
        # Org used to hold the Orderer for a single orderer simulation
        Name: BeatchainOrg
        ID: BeatchainMSP
        MSPDir: crypto-config/ordererOrganizations/beatchain.com/msp
        Policies:
            Readers:
                Type: Signature
                Rule: "OR('BeatchainMSP.member')"
            Writers:
                Type: Signature
                Rule: "OR('BeatchainMSP.member')"
            Admins:
                Type: Signature
                Rule: "OR('BeatchainMSP.admin')"

    - &AppDevOrg
        Name: AppDevOrg
        ID: AppDevMSP
        MSPDir: crypto-config/peerOrganizations/appdevorg.beatchain.com/msp
        Policies:
            Readers:
                Type: Signature
                Rule: "OR('AppDevMSP.admin', 'AppDevMSP.peer', 'AppDevMSP.client')"
            Writers:
                Type: Signature
                Rule: "OR('AppDevMSP.admin', 'AppDevMSP.client')"
            Admins:
                Type: Signature
                Rule: "OR('AppDevMSP.admin')"
        AnchorPeers:
            - Host: peer0.appdevorg.beatchain.com
              Port: 7051

    - &CreatorOrg
        Name: CreatorOrg
        ID: CreatorMSP
        MSPDir: crypto-config/peerOrganizations/creatororg.beatchain.com/msp
        Policies:
            Readers:
                Type: Signature
                Rule: "OR('CreatorMSP.admin', 'CreatorMSP.peer', 'CreatorMSP.client')"
            Writers:
                Type: Signature
                Rule: "OR('CreatorMSP.admin', 'CreatorMSP.client')"
            Admins:
                Type: Signature
                Rule: "OR('CreatorMSP.admin')"
        AnchorPeers:
            - Host: peer0.creatororg.beatchain.com
              Port: 7051

    - &CustomerOrg
        Name: CustomerOrg
        ID: CustomerMSP
        MSPDir: crypto-config/peerOrganizations/customerorg.beatchain.com/msp
        Policies:
            Readers:
                Type: Signature
                Rule: "OR('CustomerMSP.admin', 'CustomerMSP.peer', 'CustomerMSP.client')"
            Writers:
                Type: Signature
                Rule: "OR('CustomerMSP.admin', 'CustomerMSP.client')"
            Admins:
                Type: Signature
                Rule: "OR('CustomerMSP.admin')"
        AnchorPeers:
            - Host: peer0.customerorg.beatchain.com
              Port: 7051

################################################################################
#
#   SECTION: Orderer
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters
#
################################################################################
Orderer: &OrdererDefaults

    OrdererType: solo
    Addresses:
        - orderer.beatchain.com:7050
    # Batch Timeout: The amount of time to wait before creating a batch
    BatchTimeout: 2s
    # Batch Size: Controls the number of messages batched into a block
    BatchSize:
        # Max Message Count: The maximum number of messages to permit in a batch
        MaxMessageCount: 10
        # Absolute Max Bytes: The absolute maximum number of bytes allowed for
        # the serialized messages in a batch.
        AbsoluteMaxBytes: 99 MB
        # Preferred Max Bytes: The preferred maximum number of bytes allowed for
        # the serialized messages in a batch. A message larger than the preferred
        # max bytes will result in a batch larger than preferred max bytes.
        PreferredMaxBytes: 512 KB
    CA:
        OrganizationalUnit: admin
    Kafka:
        # Brokers: A list of Kafka brokers to which the orderer connects
        # NOTE: Use IP:port notation
        Brokers:
            - 127.0.0.1:9092
    # Organizations is the list of orgs which are defined as participants on
    # the orderer side of the network
    Organizations:
    # Policies defines the set of policies at this level of the config tree
    # For Orderer policies, their canonical path is
    #   /Channel/Orderer/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"
        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
        BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"

################################################################################
#
#   SECTION: Application
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for application related parameters
#
################################################################################
Application: &ApplicationDefaults
    # Organizations is the list of orgs which are defined as participants on
    # the application side of the network
    Organizations:
    # Policies defines the set of policies at this level of the config tree
    # For Application policies, their canonical path is
    #   /Channel/Application/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"
################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults
    # Policies defines the set of policies at this level of the config tree
    # For Channel policies, their canonical path is
    #   /Channel/<PolicyName>
    Policies:
        # Who may invoke the 'Deliver' API
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        # Who may invoke the 'Broadcast' API
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        # By default, who may modify elements at this config level
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins"

################################################################################
#
#   SECTION: Capabilities
#
#   - This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
    # Channel capabilities apply to both the orderers and the peers and must be
    # supported by both.  Set the value of the capability to true to require it.
    Global: &ChannelCapabilities
        # V1.1 for Global is a catchall flag for behavior which has been
        # determined to be desired for all orderers and peers running v1.0.x,
        # but the modification of which would cause incompatibilities.  Users
        # should leave this flag set to true.
        V1_1: true

    # Orderer capabilities apply only to the orderers, and may be safely
    # manipulated without concern for upgrading peers.  Set the value of the
    # capability to true to require it.
    Orderer: &OrdererCapabilities
        # V1.1 for Order is a catchall flag for behavior which has been
        # determined to be desired for all orderers running v1.0.x, but the
        # modification of which  would cause incompatibilities.  Users should
        # leave this flag set to true.
        V1_1: true

    # Application capabilities apply only to the peer network, and may be safely
    # manipulated without concern for upgrading orderers.  Set the value of the
    # capability to true to require it.
    Application: &ApplicationCapabilities
        # V1.1 for Application is a catchall flag for behavior which has been
        # determined to be desired for all peers running v1.0.x, but the
        # modification of which would cause incompatibilities.  Users should
        # leave this flag set to true.
        V1_2: true

################################################################################
#
#   Profile
#
#   - Different configuration profiles may be encoded here to be specified
#   as parameters to the configtxgen tool
#
################################################################################
Profiles:

    BeatchainGenesis:
        <<: *ChannelDefaults
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *BeatchainOrg
            Capabilities:
                <<: *OrdererCapabilities
        Consortiums:
            # We can separate consortiums later for multiple channels; for now, use one to prototype
            BeatchainConsortium:
                Organizations:
                    - *AppDevOrg
                    - *CreatorOrg
                    - *CustomerOrg
            ContractConsortium:
                Organizations:
                    - *AppDevOrg
                    - *CreatorOrg
    fullchannel:
        # Includes all participants for dev and prototyping purposes
        Consortium: BeatchainConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *AppDevOrg
                - *CreatorOrg
                - *CustomerOrg
            Capabilities:
                <<: *ApplicationCapabilities

    contractchannel:
        # Includes Creators and Devs to generate and agree to streaming contracts
        # Hidden from Customer view
        Consortium: ContractConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *AppDevOrg
                - *CreatorOrg
            Capabilities:
                <<: *ApplicationCapabilities

    bankingchannel:
        # Includes all orgs but solely for banking and financial transactions
        Consortium: BeatchainConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *AppDevOrg
                - *CreatorOrg
                - *CustomerOrg
            Capabilities:
                <<: *ApplicationCapabilities

    streamingchannel:
        # Org used to deliver content streaming from AppDevs to Customers.
        # Creators included to enable content usage monitoring
        Consortium: BeatchainConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *AppDevOrg
                - *CreatorOrg
                - *CustomerOrg
            Capabilities:
                <<: *ApplicationCapabilities